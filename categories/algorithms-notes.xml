<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithmic Toolbox (Posts about algorithms notes)</title><link>https://github.com/necromuralist/algorithmic_toolbox/</link><description></description><atom:link href="https://github.com/necromuralist/algorithmic_toolbox/categories/algorithms-notes.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 24 Jun 2018 23:03:38 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Learning Algorithms Through Programming and Puzzle Solving Notes</title><link>https://github.com/necromuralist/algorithmic_toolbox/posts/learning-algorithms-through-programming-and-puzzle-solving-notes/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
These are my notes from the book &lt;i&gt;Learning Algorithms Through Programming and Puzzle Solving&lt;/i&gt;, available for purchase from &lt;a href="https://leanpub.com/algo"&gt;leanpub.com&lt;/a&gt;.
&lt;/p&gt;
&lt;div id="outline-container-org8b3020b" class="outline-2"&gt;
&lt;h2 id="org8b3020b"&gt;Algorithms and Complexity&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8b3020b"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcbcb2c6" class="outline-3"&gt;
&lt;h3 id="orgcbcb2c6"&gt;What is an algorithm?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcbcb2c6"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;A sequence of instructions to solve a well formulated problem.&lt;/li&gt;
&lt;li&gt;Problems are specified in terms of their inputs and outputs and the algorithm has to transform the inputs into the outputs.&lt;/li&gt;
&lt;li&gt;An unambiguous specification of how to solve a class of problems (&lt;a href="https://en.wikipedia.org/wiki/Algorithm"&gt;wikipedia&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org976a6cb" class="outline-4"&gt;
&lt;h4 id="org976a6cb"&gt;What is a well-formulated problem?&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org976a6cb"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;unambiguous&lt;/li&gt;
&lt;li&gt;precise&lt;/li&gt;
&lt;li&gt;No room for misinterpretation&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdb1f7ef" class="outline-4"&gt;
&lt;h4 id="orgdb1f7ef"&gt;What are two of the most important things to ask about an algorithm?&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgdb1f7ef"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Does it work correctly?&lt;/li&gt;
&lt;li&gt;How long does it take?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaa57011" class="outline-3"&gt;
&lt;h3 id="orgaa57011"&gt;What is Pseudocode?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgaa57011"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;A language that ignores specifics needed for a programming language but is precise enough to describe an algorithm.&lt;/li&gt;
&lt;li&gt;An informal, high-level description of an algorithm (&lt;a href="https://en.wikipedia.org/wiki/Pseudocode"&gt;wikipedia&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org31bc99e" class="outline-3"&gt;
&lt;h3 id="org31bc99e"&gt;What is the difference between a Problem and a Problem Instance?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org31bc99e"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;A problem is a class of computational tasks&lt;/li&gt;
&lt;li&gt;A problem instance is a particular input for a problem class&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1a53039" class="outline-4"&gt;
&lt;h4 id="org1a53039"&gt;Example: The Change Problem&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1a53039"&gt;
&lt;p&gt;
The example given in the book is making change for someone. You want to be able to break a larger denomination (say a dollar) into smaller ones using the fewest number of coins. In this case they specifically say coin but you could re-state it to mean any type of money.
&lt;/p&gt;

&lt;p&gt;
\[
\textbf{Input:}\text{ An integer }money\text{ and an array of }d\text{ denominations } c = c_1, c_2, \ldots, c_n,\text{ in decreasing order of value }(c_1 &amp;gt; c_2 &amp;gt; \ldots &amp;gt;c_n).
\]
&lt;/p&gt;

&lt;p&gt;
\[
\textbf{Output:}\text{ A list of}d\text{ integers } i_1, i_2,\ldots,i_d\text{ such that }c_1 i_1 + c_2 i_2 + \ldots + c_d i_d = money,\text{ and } i_1 + i_2 + \ldots + i_d\text{ is as small as possible.}
\]
&lt;/p&gt;

&lt;p&gt;
This is the way most people do it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;MakeChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;money&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;coin&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s2"&gt;"coin with largest denomination not greater than value of money."&lt;/span&gt;
	&lt;span class="s2"&gt;"Give coin to customer"&lt;/span&gt;
	&lt;span class="n"&gt;money&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;money&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;i&gt;What was c and d for?&lt;/i&gt; In the example solution they aren't used (and they also don't output the number of each coin as was required in the problem statement), but there is an alternative solution that always goes through the denominations once.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;MakeChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Make change using the smallest number of coins&lt;/span&gt;

&lt;span class="sd"&gt;    Inputs:&lt;/span&gt;
&lt;span class="sd"&gt;     - money: the original amount that you want to break up&lt;/span&gt;
&lt;span class="sd"&gt;     - c: an array of coin denominations&lt;/span&gt;
&lt;span class="sd"&gt;     - d: The number of denominations in c&lt;/span&gt;

&lt;span class="sd"&gt;    Outputs:&lt;/span&gt;
&lt;span class="sd"&gt;     list of counts for each coin denomination&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
	&lt;span class="n"&gt;i_k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;money&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c_k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;money&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;money&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i_k&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c_k&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i_d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
You could probably improve on the second version by quitting once you have made the change (i.e. &lt;i&gt;money&lt;/i&gt; is 0).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge4e2344" class="outline-3"&gt;
&lt;h3 id="orge4e2344"&gt;What are correct and incorrect algorithms?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge4e2344"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Correct: every input instance produces a correct output&lt;/li&gt;
&lt;li&gt;Incorrect: At least one input produces an incorrect output&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
By this definition the &lt;code&gt;MakeChange&lt;/code&gt; algorithm might be incorrect depending on the denominations of the coins. Suppose you had denominations of 25, 15, 11, 5, and 1 and you owed someone 46 cents, the algorithm would produce \(1 \times 25, 1 \times 15, 1 \times 5\), and \(1 \times 1\). But if you skipped the largest coin you could use \(2 \times 15, 1 \times 11\) and get the same change with three coins instead of four.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9144da9" class="outline-3"&gt;
&lt;h3 id="org9144da9"&gt;What are fast and slow algorithms?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9144da9"&gt;
&lt;p&gt;
Because different computers can perform at different speeds, &lt;i&gt;time&lt;/i&gt; is a poor measure of algorithmic speed. Instead we use the count of basic operations that an algorithm uses.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgee0f58d" class="outline-3"&gt;
&lt;h3 id="orgee0f58d"&gt;What is Big-O Notation?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgee0f58d"&gt;
&lt;p&gt;
As the number of inputs goes up, the fastest growing term in the equation describing the number of operations an algorithm makes begins to dominate the count, so generally only this term is used to characterize the running time of the algorithm. Lets say you have two for loops and, given an input of \(n\), they have a run-time of \(3n + n^3\). When \(n\) is 1, the first term is 3 and the second term is 1, but when \(n\) is \(1,000\), the first term is \(3,000\) while the second term is \(1,000,000,000\).
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://github.com/necromuralist/algorithmic_toolbox/posts/learning-algorithms-through-programming-and-puzzle-solving-notes/big_o_example.png" alt="big_o_example.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
As you can see, the \(n^3\) term grows much faster, accounting for just about all of the number of operations as \(n\) grows (to make the \(3n\) line visible at all I had to set the axis to a negative number). Although the So when using &lt;a href="https://en.wikipedia.org/wiki/Big_O_notation"&gt;Big-O Notation&lt;/a&gt; we would say that it has a run time of \(O(n^3)\). Note that we generally don't put in any constant multipliers, so if the second term had been \(2n^3\), it would still be \(O(n^3)\).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf3766cc" class="outline-2"&gt;
&lt;h2 id="orgf3766cc"&gt;Algorithm Design Techniques&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2dde2ab" class="outline-2"&gt;
&lt;h2 id="org2dde2ab"&gt;Programming Challenges&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga8f5dff" class="outline-2"&gt;
&lt;h2 id="orga8f5dff"&gt;Algorithmic Warm Up&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-org20c0611" class="outline-2"&gt;
&lt;h2 id="org20c0611"&gt;Greedy Algorithms&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd21527d" class="outline-2"&gt;
&lt;h2 id="orgd21527d"&gt;Divide-and-Conquer&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8034dd0" class="outline-2"&gt;
&lt;h2 id="org8034dd0"&gt;Dynamic Programming&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8dc4f0e" class="outline-2"&gt;
&lt;h2 id="org8dc4f0e"&gt;Appendix&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8fd5c1e" class="outline-2"&gt;
&lt;h2 id="org8fd5c1e"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8fd5c1e"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Kulikov, Alexander S, and Pavel A Pevzner. “Learning Algorithms Through Programming and Puzzle Solving,” n.d., 138.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>algorithms notes</category><guid>https://github.com/necromuralist/algorithmic_toolbox/posts/learning-algorithms-through-programming-and-puzzle-solving-notes/</guid><pubDate>Sun, 24 Jun 2018 18:13:00 GMT</pubDate></item></channel></rss>