#+BEGIN_COMMENT
.. title: Fibonacci Number Again
.. slug: fibonacci-number-again
.. date: 2018-06-27 15:52:25 UTC-07:00
.. tags: problems algorithms fibonacci
.. category: problems
.. link: 
.. description: Calculate Fibonacci number /n/ modulo m.
.. type: text
#+END_COMMENT

#+BEGIN_SRC ipython :session fibonacci :results none
# this package
from algorithmic_toolbox.helpers import time_it
from algorithmic_toolbox.implementations import (
    fibonacci_cached,
    memory,
    )
#+END_SRC

* Introduction
  In this problem we will calculate $F_n \mod m$ where $n$ can be very large (up to $10^{18}$). To see how to do this look at some output for modulus operations.

#+BEGIN_SRC ipython :session fibonacci :results output
for number in range(15):
    print(fibonacci_cached(number) % 2, end=', ')
#+END_SRC

#+RESULTS:
: 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 

You can see that the output repeats in cycles of three.

#+BEGIN_SRC ipython :session fibonacci :results output
cycle = [0, 1, 1]
for number in range(15):
    print(cycle[number % 3], end=',')
#+END_SRC

#+RESULTS:
: 0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,

So if you know the cycle, you don't need to calculate the fibonacci number. What about mod 3?

#+BEGIN_SRC ipython :session fibonacci :results output
for number in range(16):
    print(fibonacci_cached(number) % 3, end=',')
#+END_SRC

#+RESULTS:
: 0,1,1,2,0,2,2,1,0,1,1,2,0,2,2,1,

It looks like it repeats every eight numbers. In general, the fact that the modulus of fibonacci numbers is periodic was is a known feature of them. Each period is known as a [[https://en.wikipedia.org/wiki/Pisano_period][Pisano period]] (Pisano was the real last name of the man known as Fibonacci).

* Problem Description

|               | Description                                                                                  |
|---------------+----------------------------------------------------------------------------------------------|
| *Task*        | Given two integers $n$ and $m$, output $F_n \mod m$ (the remainder of $F_n$ divided by $m$). |
| *Input*       | Two integers $n$ and $m$ on the same line separated by a space.                              |
| *Constraints* | $1 \le n \le 10^{18}, 2 \le m \le 10^5$                                                      |
| *Output*      | $F_n \mod m$                                                                                 |
** Constants
#+BEGIN_SRC ipython :session fibonacci :results none
MAX_N = 10**18
MAX_M = 10**5
MAX_TIME = 5
#+END_SRC
* Samples

| Input            | Output |                             |
|------------------+--------+-----------------------------|
| 239 1000         |    161 | $F_{239} \mod 1000          |
| 2816213588 239   |    151 | $F_{2816213588} \mod 239$   |
| 1 239            |      1 | $F_1 \mod 239$              |
| 115 1000         |    885 | $F_{115} \mod 1000$         |
| 2816213588 30524 |  10249 | $F_{2816213588} \mod 30524$ |

#+BEGIN_SRC ipython :session fibonacci :results output
previous, current = 0, 1
x = 2816213588 // 30524
for number in range(x):
    previous, current = current, (previous + current) % 30524
print(current)
#+END_SRC

#+RESULTS:
: 11325

* Identity Version

#+BEGIN_SRC ipython :session fibonacci :results none
def fibonacci_identity(n):
    """Calculates the nth fibonacci number
    
    Args:
     n (int): count of number to calculate

    Returns:
     int: nth fibonacci number
    """
    return _fibonacci(n)[0]
#+END_SRC

#+BEGIN_SRC ipython :session fibonacci :results none
def _fibonacci(n):
    """Calculates fibonacci number

    Returns:
     tuple: F(2k), F(2K + 1)
    """
    if n == 0:
        return (0, 1)

    a, b = _fibonacci(n//2)
    c = a * (b * 2 - a)
    d = a**2 + b**2
    if n % 2 == 0:
        return c, d
    return d, c + d
#+END_SRC

#+BEGIN_SRC ipython :session fibonacci :results output
f_0 = fibonacci_cached(45)
f_1 = fibonacci_identity(45)
print(f_0)
print(f_1)
assert f_0 == f_1
#+END_SRC

#+RESULTS:
: 1134903170
: 1134903170

#+BEGIN_SRC ipython :session fibonacci :results output
for n in range(0, MAX_N, 1000):
    print("{}: {}".format(n, fibonacci_cached(n)))
#+END_SRC

#+BEGIN_SRC ipython :session fibonacci :results output
expected = fibonacci_cached(MAX_N)
#+END_SRC
